/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ITreasury {
  export type InvestmentStruct = {
    asset: string;
    amount: BigNumberish;
    value: BigNumberish;
  };

  export type InvestmentStructOutput = [
    asset: string,
    amount: bigint,
    value: bigint
  ] & { asset: string; amount: bigint; value: bigint };

  export type TreasuryStateStruct = {
    totalFunds: BigNumberish;
    allocatedFunds: BigNumberish;
    availableFunds: BigNumberish;
    lastUpdated: BigNumberish;
    investmentPortfolio: ITreasury.InvestmentStruct[];
  };

  export type TreasuryStateStructOutput = [
    totalFunds: bigint,
    allocatedFunds: bigint,
    availableFunds: bigint,
    lastUpdated: bigint,
    investmentPortfolio: ITreasury.InvestmentStructOutput[]
  ] & {
    totalFunds: bigint;
    allocatedFunds: bigint;
    availableFunds: bigint;
    lastUpdated: bigint;
    investmentPortfolio: ITreasury.InvestmentStructOutput[];
  };
}

export interface ITreasuryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allocateFunds"
      | "deposit"
      | "getInvestmentOptions"
      | "getState"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FundsAllocated"
      | "FundsDeposited"
      | "FundsWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allocateFunds",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestmentOptions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocateFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInvestmentOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace FundsAllocatedEvent {
  export type InputTuple = [target: AddressLike, amount: BigNumberish];
  export type OutputTuple = [target: string, amount: bigint];
  export interface OutputObject {
    target: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDepositedEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITreasury extends BaseContract {
  connect(runner?: ContractRunner | null): ITreasury;
  waitForDeployment(): Promise<this>;

  interface: ITreasuryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allocateFunds: TypedContractMethod<
    [amount: BigNumberish, target: AddressLike],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getInvestmentOptions: TypedContractMethod<
    [],
    [ITreasury.InvestmentStructOutput[]],
    "view"
  >;

  getState: TypedContractMethod<
    [],
    [ITreasury.TreasuryStateStructOutput],
    "view"
  >;

  withdraw: TypedContractMethod<
    [amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allocateFunds"
  ): TypedContractMethod<
    [amount: BigNumberish, target: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getInvestmentOptions"
  ): TypedContractMethod<[], [ITreasury.InvestmentStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getState"
  ): TypedContractMethod<[], [ITreasury.TreasuryStateStructOutput], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FundsAllocated"
  ): TypedContractEvent<
    FundsAllocatedEvent.InputTuple,
    FundsAllocatedEvent.OutputTuple,
    FundsAllocatedEvent.OutputObject
  >;
  getEvent(
    key: "FundsDeposited"
  ): TypedContractEvent<
    FundsDepositedEvent.InputTuple,
    FundsDepositedEvent.OutputTuple,
    FundsDepositedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;

  filters: {
    "FundsAllocated(address,uint256)": TypedContractEvent<
      FundsAllocatedEvent.InputTuple,
      FundsAllocatedEvent.OutputTuple,
      FundsAllocatedEvent.OutputObject
    >;
    FundsAllocated: TypedContractEvent<
      FundsAllocatedEvent.InputTuple,
      FundsAllocatedEvent.OutputTuple,
      FundsAllocatedEvent.OutputObject
    >;

    "FundsDeposited(address,uint256)": TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;
    FundsDeposited: TypedContractEvent<
      FundsDepositedEvent.InputTuple,
      FundsDepositedEvent.OutputTuple,
      FundsDepositedEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
  };
}
